import praw
import random
import datetime
import time
from textblob import TextBlob

# copy your generate_comment function from the madlibs assignment here

madlibs = [
    "[Kamala Harris] is a puppet for [sleepy] Joe Biden. She and those damn [liberals] are the reason America is going [downhill]. It's [absolutely] shameful!" , 
    "[Kamala Harris] doesn't care about the [hardworking] Americans who lay down their [blood and sweat] for this [country]. All she cares about is pandering to the [soft], whiny [liberals]. ",
    "Anyone notice how low the approval rating for [Kamala Harris] has been lately? That's no coincidence! Her ratings don't compare to [Trump]. Not even [sleepy] Joe or those [liberals] like her! Isn't that [absolutely] hilarious?",
    "I can't be the only one tired of this [pandemic], right? [Kamala Harris] pushed so hard for this vaccine and behold - [nothing changed]! This [country] is screwed thanks to her and those [liberals]. Where is [Trump] when we need him? ",
    "Remember the good old days when we had [Trump] as president? I can't - not when we got [sleepy] Joe Biden AND his dumb sidekick [Kamala Harris] in power. They've screwed us - the REAL [hardworking] Americans - over with this [pandemic]!",
    "We're so privileged to be in this [country], but we got [Kamala Harris] in power. Clearly America has become [soft]. It's not like the [pandemic] made her look any better either. Wake up, sheeple! The U.S. is going [downhill]."
    ]

replacements = {
    'Kamala Harris' : ['Vice President Harris', 'VP Harris', 'The U.S. Vice President', 'The Unhonorable VP Kamala Harris '],
    'nothing changed' : ['nothing has changed', 'we are still wearing masks', 'we are still social-distancing'],
    'downhill' : ['to flames', 'to shit', 'on a downward spiral', 'to fall under other world powers'],
    'pandemic' : ['PLANdemic', 'so-called pandemic', 'pandemic that, for the record, is NOT real'],
    'absolutely' : ['very', 'pretty', 'super', 'extremely'],
    'blood and sweat' : ['blood', 'livelihoods,' 'blood, sweat, and tears'],
    'sleepy' : ['lazy', 'stupid', 'pathetic ', 'sniveling'], 
    'hardworking' : ['committed', 'loyal', 'patriotic', 'noble', 'persevering'], 
    'country' : ['beautiful country', 'country blessed by God', 'land that God so graciously gave us', 'country that is supposed to stand for noble things'], 
    'soft' : ['weak', 'lame', 'ignorant', 'feeble-minded', 'entitled'], 
    'liberals' : ['libtards', 'snowflakes', 'crybabies', 'beta-class citizens', 'SJWs'],
    'Trump': ['the 2 Bush presidents', 'George W Bush', 'George H.W. Bush', 'Donald J Trump', 'Donald Trump']
    }

def generate_comment():
    s = random.choice(madlibs)
    for k in replacements.keys():
        s = s.replace('[' + k + ']', random.choice(replacements[k]))
    return s

# select a "home" submission in the /r/BotTown subreddit to post to and put the url below
submission_url = 'https://old.reddit.com/r/BotTown2/comments/r0yi9l/main_discussion_thread/'
reddit = praw.Reddit('anotha_bot1', user_agent='cs40bot')
submission = reddit.submission(url=submission_url)



'''
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
'''
while True:

    # printing the current time will help make the output messages more informative
    # since things on reddit vary with time
    print()
    print('new iteration at:',datetime.datetime.now())
    print('submission.title=',submission.title)
    print('submission.url=',submission.url)


    #TASK 0: get a list of all of the comments in the submission 
    # HINT: this requires using the .list() and the .replace_more() functions

    submission.comments.replace_more(limit=None)
    all_comments = []
    for comment in submission.comments.list():
        all_comments.append(comment)

    # HINT: 
    # we need to make sure that our code is working correctly,
    # and you should not move on from one task to the next until you are 100% sure that 
    # the previous task is working;
    # in general, the way to check if a task is working is to print out information 
    # about the results of that task, 
    # and manually inspect that information to ensure it is correct; 
    # in this specific case, you should check the length of the all_comments variable,
    # and manually ensure that the printed length is the same as the length displayed on reddit;
    # if it's not, then there are some comments that you are not correctly identifying,
    # and you need to figure out which comments those are and how to include them.
    print('len(all_comments)=',len(all_comments))


    # FIXME (task 1): filter all_comments to remove comments that were generated by your bot
    # HINT: 
    # use a for loop to loop over each comment in all_comments,
    # and an if statement to check whether the comment is authored by you or not
    not_my_comments = []
    for comment in all_comments: 
        if str(comment.author) != 'anotha_bot' :
            not_my_comments.append(comment)

    print('len(not_my_comments)=',len(not_my_comments))

    
    # if the length of your all_comments and not_my_comments lists are the same,
    # then that means you have not posted any comments in the current submission;
    # (your bot may have posted comments in other submissions);
    # your bot will behave differently depending on whether it's posted a comment or not
    has_not_commented = len(not_my_comments) == len(all_comments)

    #task 2
    # if you have not made any comment in the thread, then post a top level comment

    if has_not_commented:
        text = generate_comment()
        submission.reply(text)
    
    else:
        #(task 3): filter the not_my_comments list to also remove comments that 
        # you've already replied to

        comments_without_replies = []
        for comment in not_my_comments:
            if comment.author != 'anotha_bot':
                response = False
                for reply in comment.replies:
                    if str(reply.author) == 'anotha_bot':
                        response = True
                if response is False:
                    comments_without_replies.append(comment)
        print('len(comments_without_replies)=',len(comments_without_replies))


        # task 4: randomly select a comment from the comments_without_replies list,
        # and reply to that comment
        
        for comments in comments_without_replies:
            selection = random.choice(comments_without_replies)
            generated_reply = generate_comment()
            try:
                selection.reply(generated_reply)
            except praw.exceptions.RedditAPIException as error:
                if "DELETED_COMMENT" in str(error):
                    print("Comment " + comment.id + " was deleted")
                else:
                    print('Error Found: ', error)
                    time.sleep(120)


    # task 5: select a new submission for the next iteration;
    # your newly selected submission should be randomly selected from the 5 hottest submissions

    randomnumber = random.random()
    allsubmissions = []
    if randomnumber >= 0.5:
        print('Original Sub')
        submission = reddit.submission(url='https://old.reddit.com/r/BotTown2/comments/r0yi9l/main_discussion_thread/')
        submission.reply(generate_comment())
    if randomnumber < 0.5:
        print('Top Subreddit Sub')
        for submission in reddit.subreddit('BotTown2').hot():
            allsubmissions.append(submission)
        newsubmission = random.choice(allsubmissions)
        submission = reddit.submission(id=newsubmission)
        print('Submission ID: ', newsubmission)
        print(newsubmission.title)

    # We sleep just for 1 second at the end of the while loop.
    # This doesn't avoid rate limiting
    # (since we're not sleeping for a long period of time),
    # but it does make the program's output more readable.
    time.sleep(25)


#Extra Credit 6 (sticking it in here because I can )
    try: 
# comment = random.choice(comments_without_replies)
        comment = sorted(comments_without_replies, key=lambda x: x.score, reverse=True)[0]   #upvote extra credit 
        text= generate_comment()
        comment.reply(text)
    except praw.exceptions.APIException:
            print('not replying to a deleted comment')
    except IndexError:
            print('not replying because replied to all comments that are not mine')